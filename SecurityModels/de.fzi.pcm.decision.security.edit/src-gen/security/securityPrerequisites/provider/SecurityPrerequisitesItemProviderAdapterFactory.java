/**
 */
package security.securityPrerequisites.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import security.securityPrerequisites.util.SecurityPrerequisitesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SecurityPrerequisitesItemProviderAdapterFactory extends SecurityPrerequisitesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SecurityPrerequisitesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link security.securityPrerequisites.PrerequisiteCatalog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrerequisiteCatalogItemProvider prerequisiteCatalogItemProvider;

	/**
	 * This creates an adapter for a {@link security.securityPrerequisites.PrerequisiteCatalog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrerequisiteCatalogAdapter() {
		if (prerequisiteCatalogItemProvider == null) {
			prerequisiteCatalogItemProvider = new PrerequisiteCatalogItemProvider(this);
		}

		return prerequisiteCatalogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link security.securityPrerequisites.Prerequisite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrerequisiteItemProvider prerequisiteItemProvider;

	/**
	 * This creates an adapter for a {@link security.securityPrerequisites.Prerequisite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrerequisiteAdapter() {
		if (prerequisiteItemProvider == null) {
			prerequisiteItemProvider = new PrerequisiteItemProvider(this);
		}

		return prerequisiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link security.securityPrerequisites.SecurityPrerequisite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityPrerequisiteItemProvider securityPrerequisiteItemProvider;

	/**
	 * This creates an adapter for a {@link security.securityPrerequisites.SecurityPrerequisite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityPrerequisiteAdapter() {
		if (securityPrerequisiteItemProvider == null) {
			securityPrerequisiteItemProvider = new SecurityPrerequisiteItemProvider(this);
		}

		return securityPrerequisiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link security.securityPrerequisites.ComponentPrerequisite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentPrerequisiteItemProvider componentPrerequisiteItemProvider;

	/**
	 * This creates an adapter for a {@link security.securityPrerequisites.ComponentPrerequisite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentPrerequisiteAdapter() {
		if (componentPrerequisiteItemProvider == null) {
			componentPrerequisiteItemProvider = new ComponentPrerequisiteItemProvider(this);
		}

		return componentPrerequisiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link security.securityPrerequisites.SystemPrerequisite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemPrerequisiteItemProvider systemPrerequisiteItemProvider;

	/**
	 * This creates an adapter for a {@link security.securityPrerequisites.SystemPrerequisite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemPrerequisiteAdapter() {
		if (systemPrerequisiteItemProvider == null) {
			systemPrerequisiteItemProvider = new SystemPrerequisiteItemProvider(this);
		}

		return systemPrerequisiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link security.securityPrerequisites.ResourcePrerequisite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourcePrerequisiteItemProvider resourcePrerequisiteItemProvider;

	/**
	 * This creates an adapter for a {@link security.securityPrerequisites.ResourcePrerequisite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourcePrerequisiteAdapter() {
		if (resourcePrerequisiteItemProvider == null) {
			resourcePrerequisiteItemProvider = new ResourcePrerequisiteItemProvider(this);
		}

		return resourcePrerequisiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link security.securityPrerequisites.UsagePrerequisite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UsagePrerequisiteItemProvider usagePrerequisiteItemProvider;

	/**
	 * This creates an adapter for a {@link security.securityPrerequisites.UsagePrerequisite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUsagePrerequisiteAdapter() {
		if (usagePrerequisiteItemProvider == null) {
			usagePrerequisiteItemProvider = new UsagePrerequisiteItemProvider(this);
		}

		return usagePrerequisiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link security.securityPrerequisites.BusinessPrerequisite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessPrerequisiteItemProvider businessPrerequisiteItemProvider;

	/**
	 * This creates an adapter for a {@link security.securityPrerequisites.BusinessPrerequisite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessPrerequisiteAdapter() {
		if (businessPrerequisiteItemProvider == null) {
			businessPrerequisiteItemProvider = new BusinessPrerequisiteItemProvider(this);
		}

		return businessPrerequisiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link security.securityPrerequisites.ConfigurationPrerequisite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationPrerequisiteItemProvider configurationPrerequisiteItemProvider;

	/**
	 * This creates an adapter for a {@link security.securityPrerequisites.ConfigurationPrerequisite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationPrerequisiteAdapter() {
		if (configurationPrerequisiteItemProvider == null) {
			configurationPrerequisiteItemProvider = new ConfigurationPrerequisiteItemProvider(this);
		}

		return configurationPrerequisiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link security.securityPrerequisites.AttackerPrerequisite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttackerPrerequisiteItemProvider attackerPrerequisiteItemProvider;

	/**
	 * This creates an adapter for a {@link security.securityPrerequisites.AttackerPrerequisite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttackerPrerequisiteAdapter() {
		if (attackerPrerequisiteItemProvider == null) {
			attackerPrerequisiteItemProvider = new AttackerPrerequisiteItemProvider(this);
		}

		return attackerPrerequisiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link security.securityPrerequisites.TechnologyPrerequisite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TechnologyPrerequisiteItemProvider technologyPrerequisiteItemProvider;

	/**
	 * This creates an adapter for a {@link security.securityPrerequisites.TechnologyPrerequisite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTechnologyPrerequisiteAdapter() {
		if (technologyPrerequisiteItemProvider == null) {
			technologyPrerequisiteItemProvider = new TechnologyPrerequisiteItemProvider(this);
		}

		return technologyPrerequisiteItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (prerequisiteCatalogItemProvider != null) prerequisiteCatalogItemProvider.dispose();
		if (prerequisiteItemProvider != null) prerequisiteItemProvider.dispose();
		if (securityPrerequisiteItemProvider != null) securityPrerequisiteItemProvider.dispose();
		if (componentPrerequisiteItemProvider != null) componentPrerequisiteItemProvider.dispose();
		if (systemPrerequisiteItemProvider != null) systemPrerequisiteItemProvider.dispose();
		if (resourcePrerequisiteItemProvider != null) resourcePrerequisiteItemProvider.dispose();
		if (usagePrerequisiteItemProvider != null) usagePrerequisiteItemProvider.dispose();
		if (businessPrerequisiteItemProvider != null) businessPrerequisiteItemProvider.dispose();
		if (configurationPrerequisiteItemProvider != null) configurationPrerequisiteItemProvider.dispose();
		if (attackerPrerequisiteItemProvider != null) attackerPrerequisiteItemProvider.dispose();
		if (technologyPrerequisiteItemProvider != null) technologyPrerequisiteItemProvider.dispose();
	}

}
